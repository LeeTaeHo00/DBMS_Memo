복습 -> sql문 주요 특징 -> SELECT -> 자료형 -> 연산자 -> SQL 쿼리문의 종류 -> 무결성

0. 복습
1) 설치
	버전은 홀수 버전을 사용(홀수 버전이 안정화되어있음)
	i : internet
	9i 2001
	g : grid computing
	11g release 2007
	c : cloud

	> i : 인터넷 플랫폼 기반
	> g : grid 그리드 컴퓨팅 기반
	> c : cloud 클라우드 컴퓨팅 기반
	> SE : Standard Edition	  소규모 기업
	> EE : Enterprise Edition 대규모 기업
	> XE : Express Edition	  학습용

- cmd > sqlplus
	오라클 11g 설치
- 오라클 계정 가입 후 다운로드
	https://www.oracle.com/database/technologies/xe-prior-release-downloads.html
	운영체제에 맞는 걸로 다운로드 > 로그인 > zip 파일 압축 해제(반디집 사용)
	> setup.exe 파일 실행 > 경로 C:\oraclexe\ 확인 후 설치 진행 > 비밀번호 1234 통일(관리자 sys 비밀번호)

- cmd 에서 확인
	cmd > sqlplus 입력
	Enter user-name : sys as  sysdba(관리자권한) 입력 후 1234

2) 오카클 기본 계정과 권한
	sys : Oracle DBMS 관리자 계정(총관리자)
	system : DMBS 운영을 위한 관리자 계정
	hr : 학습을 위한 계정

	sysdba : 데이터베이스 생성 및 삭제등 모든 권한을 의미(sys가 갖는 권한)
	sysoper : 데이터 베이스 운영을 위한 권한을 의미( systeam이 갖는 권한) -> 생성이나 삭제는 못함

3) hr 계정 로그인
	hr 로그인 user-name : hr 입력 후 1234 -> 잠금되어있음
	따라서 sys 계정으로 로그인 후 잠금을 해제하고 비밀번호 설정을 해줘야한다

	> alter user hr account unlock; -- 결과 > User altered
	> alter user hr identified by 비밀번호; -- 결과 > User altered

	> 로그인 가능해짐

4) 디비버 설치
	무료 db 접속 툴
	선행 요구 파일 : 자바(jdk11이상)

- 디비버 설정하기 (처음에 뜨는 거 모두 X)
	1) file -> 작업공간 전환 -> 자신이 사용할 폴더 -> 프로젝트 생성 후 진행
	새 데이터 베이스 연결(플러그 모양) > 오라클 선택 > 버전 xe 선택 > 계정 hr 1234 > TestConection (처음설정시 드라이브를 설치하게됨)

- 드라이브 연결
	edit drive setting > libraries > 4개 삭제 후 > add file > ojdbc6.jar 추가 > 확인

5) 새로운 프로젝트와 스크립트 파일 만들기
	- 프로젝트 클릭 > 프로젝트 생성 > 생성된 프로젝트 마우스 우클릭 set active
	- 새 스크립트 파일 마들기 ctrl + ]
	- 스크립트 폴더 마우스 우클릭 > create > create new File 로도 만들 수 있ㅇ므

6) 디비버 단축키
	- 새로운 프로젝트 생성 ctrl + n
	- 새로운 스크립트 파일 생성 ctrl + ]
	- 쿼리문 실행 ctrl + enter
	- 주석 ctrl + / , ctrl + shift + /
	- 한줄 쿼리 삭제 ctrl + d
	- 쿼리문 이동 alt + 방향키

7) 기본 sql문
- 쿼리문 작성법
	여러줄에 걸쳐 작성이 가능하다. ; 가 끝나기 전까지 사용가능
	실행에 영향을 주지 않지만 가독성을 위해 줄바꿈, 들여쓰기를 사용한다.
	하나의 쿼리의 마침표는 ;으로 작성한다.
	대소문자를 구분하지 않는다(일반적으로는 키워드는 대문자, 나머지는 소문자로 사용)

- 주석(Comment)
	주석 처리된 sql문은 실행되지 않는다.
	한줄 주석(--) : 해당 라인 줄을 주석 처리
	범위 주석 (/**/) : 범위 안에 있는 라인을 주석처리

- hr 계정 내에 존재하는 employees 테이블
	11개 컬럼으로 이루어져 있따.
	107개의 행이 존재한다.
	107명의 직원 데이터를 저장해놓은 연습용 테이블
=========================================================

1. SQL문의 특징
1) SQL
	데이터베이스를 관리할 떄 사용하는 명령어
	SQL문, 쿼리문, 질의문

2) SQL문의 주요 특징
	한 줄씩 실행되는 인터프리터 언어
	대소문자를 구분하지 않는다.

* 가독성을 위한 일반적인 사용법
	예약어는 대문자로, 그 외의 문자들은 소문자로 작성한다.
		예약어(키워드) : 이미 정해진 역할이 있는 단어를 의미, SQL에서 실질적인 명령어를 의미
		SELECT, FROM, ALTER, DROP, INSERT, ...
	
	여러줄에 걸쳐 작성한다.
	들여쓰기 활용한다.

3) sql 문 작성 순서
	SELECT 조회할 컬럼 생각 -> FROM 테이블명 생각 -> ORDER BY 정ㄹ렬할 컬럼 생각(오름차순 AC, 내림차순 DESC)
	* ORDER BY 절에는 SELECT에서 별칭을 작성했다면 동일한 별칭으로 정할 수 있따.

- SQL 실행 순서
	FROM -> SELECT -> ORDER BY

+) Oracle 11g의 HR계정의 employees 테이블
	- 107명의 직원 데이터를 담고 있는 테이블
	- 11개의 컬럼
	EMPLOYEE_ID 	직원 아이디
	FIRST_NAME 	직원 이름
	LAST_NAME 	성
	EMAIL		이메일
	PHONE_NUMBER	전화번호
	HIRE_DATE	직무 ID
	SALARY		급여
	COMMISION_PCT	커미션 비율
	MENAGER_ID	상사직원의 ID
	DEPARTMENT_ID	부서 ID

2. SELECT문
	테이블에서 데이터를 조회할 때 사용하는 명령어


	(정렬기능)
	SELECT [DISTINCT] 컬럼명 [(AS) ("별칭")], 컬럼명 별칭, 컬럼명 "별 칭"
	FROM 테이블명
	[ORDER BY 컬럼명 [ASC or DESC]]; // ASC 오름차순, DESC 내림차순

	DISTINCT 중복제거
	ASC -- 오름차순
	DESC 내림차순
	AS "" 별칭을 붙혀 출력 AS 와 "" 생략할 수 있지만, 띄어쓰기가 포함되어 있으면 불가능


	SELECT 컬럼명1, 컬럼명2, (*는 전체를 의미)... FROME 테이블명;
	SELECT * FROM 테이블명;

============================================================================
3. 자료형

1) 문자
	CHAR : 고정길이 문자
		CHAR (용량)
		정해진 크기보다 작은 문자가 저장될 경우 남은 공간을 공백으로 채우게 된다.
		문자의 수가 변하지 않는 값에 사용
	ex) char(5) 'a' 를 넣으면 a^^^^ 로 넣어짐
	    char(5) 'abcdef' 를 넣으면 5자리를 초과하기 때문에 오류 발생

	VARCHAR2 : 가변길이 문자
		VARCHAR2(용량)
		문자의 수만큼 공간이 배정되어 남은 공간을 공백으로 채우지 않는다.
		문자의 수가 변화가 있는 값에 사용
	ex) 이름, 이메일 아이디
	ex2) varchar2(5) 'a'를 넣어도 공백없음
		varchar2(5) 'hello' 를 넣으면 딱맞게 저장
		varchar2(5) 'abcdef' 를 5자리를 초과하기 때문에 오류 발생

2) 숫자 
	NUMBER
		number(percision)	정수
		number(precision)	실수
		precision : 정밀도(최대 유효숫자 자리수)	scale : 소수점 기준 자리수
		precision 이상의 값이 들어올 경우 오류 발생
		s가 양수면 소수점 이하 음수면 소수점 이상 자리수, s 범위 밖의 값은 반올림되어 적용된다.

	ex)  NUMBER(3)
		123 -> 123
		1234 -> 오류발생
		12 -> 12

	     NUMBER(5,2) => precision = 5, scale = 2
		123.45 -> 45
		1234.56 -> 오류발생(최대는 5자리임)
		123.456 -> 123.46 (소수점 2자리까지 반올림)
		123.2 -> 123.20 (소수점 이하 2자리까지 맞춤)

	     NUMBER(5,-2)
		12345 -> 12300 (소수점 이상 자리수에서 반올림

3) 날짜
	DATE 날짜와 시간, 형식(format)에 맞추어 값을 테이블에 저장하여 사용
	TIMESTAMP	소수 초까지 정확한 날짜/시간 값을 저장하는 경우 사용
	
	ex) DATE
`		'2025-07-08' -> 2025-07-08 00:00:00
		SYSDATE -> 현재 날짜와 시간

	    TIMESTAMP
		'2025-07-08 11:47:30.345' 2025-07-08 11:47:30.345

4) 대용량
	BLOB(Binary Large Object) : 바이너리 대형 객체(이미지, 오디오, 비디오)
	이진 파일을 다룰 때 사용
	
	CLOB(Character Large Obecjet) 문자 대형 객체(큰 문자열이나 문서)
      최대 4GB 문자열 저장 가능
      long 타입을 개선한 데이터 타입

4. 연산자
※ 연산자에서는 피연산자 자리에 어떤 타입의 값이 오는지
	연산자가 어떻게 동작하든지
	연산의 겨로가가 어떤 타입의 값인지 아는 것이 중요하다

1) 단항 연산자
	양수 +
	음수 -
2) 산술 연산자
	+ 더하기
	- 빼기
	* 곱하기
	/ 나누기
	피연산자 자리에는 숫자 타입을 사용한다. 연산의 결과는 수자이다.

3) 연결 연산자
	연결연산자(concatenation) ||
	a || b a 와 b 데이터를 하나의 문자열로 연결한다
	피연산자 : 숫자, 날짜, 문자 타입 사용 가능하다.
4) 관계 (비교) 연산자
	a > b	a가 b보다 초과
	a < b	a가 b보다 미만
	a >= b	a가 b보다 이상
	a <= b	a가 b보다 이하
	a = b 	a가 b와 같다
	a != b	a가 b와 다르다.
	
	SELECT [DISTINCT] 컬럼명 [(AS) ("별칭")] -- 3
	FROM 테이블명	-- 1
	WHERE 조건식	-- 2
	[ORDER BY 컬럼명 [ASC or DESC]]; --4

	FROM -> where -> Select -> Order by
	Where 절 -> 원하는 행을 조회하거나 연산처리한다.

5) 논리 연산자
	AND	a AND b a 조건과 b 조건이 둘다 참이라면 참, 아니라면 거짓
	OR	a OR b a 조건과 b 조건이 둘다 거짓이라면 거짓
	NOT	a 조건이 거짓ㄱ이라면 참



6) SQL 연산자
	Between a and b = a 이상 b 이하인 조건을 만족하면 true
	Between a and b = 숫자 a 이상 숫자 b 이하인 조건이면 true

	Between 날짜a and 날짜b = 날짜a 부터 날짜b 사이의 날짜이면 true
	- a와 b 사이의 대소관계 비교가 진행되기 때문에 BETWEEN 작은 값 AND 큰값으로 사용해야 한다.
	- 날짜 사용시 Between 예전 날짜 And 최근 날짜로 사용해야한다.

IN(a,b,c, ...) 	a 또는 b 또는 c 인 조건을 만족하면 true

LIKE		문자열의 패턴을 검색하기 위해 사용한다.
	%	어떤 문자을 포함한 모든 문자
	_	단일 문자(문자의 길이 지정)
	
	a%	a로 시쟉하는 모든 문자
	%a%	중간에 a가 들어가는 모든 문자
	

IS NULL / IS NOT NULL
	데이터의 NULL 여부를 판단하기 위해 사용한다.	
	NULL : 데이터가 존재하지 않음을 나타내는 값
	IS NULL : 값이 NULL 일경우
	IS NOT NULL : 값이 NULL이 아닐 경우

	- 숫자와 날짜 데이터를 NUL  과 연산하면 결과는 NULL

UNKNOWN : 결과를 알 수 없음, 조회할 수 없음
	NULL 값과 조건을 사용하거나 NULL값 결과와 함꼐 사용할 경우 unknown
	a = null => unknown 으로 평가되므로 조건을 만족하는 행이 없어서 결곽가 출력되지 않는다.
	a != null => unknown 으로 평가되므로 조건을 만족하는 행이 없어서 결과가 출력되지 않는다.

	 - 오라클은 길이가 0인 문자값을 NULL로 처리한다

7) NULL 관련 함수 => 테이블 생성 후 쿼리문 작성
- NULL 이면 특정 값으로 변경
	NVL(컬럼명, 기본값) : 해당 컬럼의 값 NULL이면 지정한 값으로 출력
	NVL2(컬럼명, NULL이 아니면 사용할 값, NULL이면 사용할 값2) : nULL이 아니면 값1 일경우 값2
	
- 특정 값이면 NULL로 변경
	NULLIF(컬럼명, 값1) : 컬럼의 값이 값1과 같으면 NULL로 변환, 값11과 같지않다면 컬럼의 값
	NULLIF(컬럼명1, 컬럼명2) : 컬럼1과 컬럼2의 값이 일치하면 NULL로 변환, 아니라면 컬럼1의 값

- COALESCE(값1, 값2, 값3) : 값1, 값2, 값3 ... 중 NULL이 아닌 최초의 값

5. 쿼리문의 종류
	SQL 명령어의 성격에 따라 분류한 것이가
	
	DDL(DATA Definition Language) : 데이터 정의어
		데이터 구조(테이블 정의)를 만들고 바꾸는 명령어
	DML(Data Manipulation Language) : 데이터 조작어
		데이터 자체를 다루는 명령어
	DCL(Data Control Language) : 데이터 제어어
		권한 부여와 회수
	TCL(Transation Control Language) : 트랜잭션 제어어
		트랜잭션 제어 (DML의 변경 내용을 확정/취소)

1) DML : 데이터 조작언어(데이터 조작어)
- SELECT : 조회
	SELECT[DISTINCT] 컬럼명 [As "병칭"]
	FROM 테이블명
	[WHERE 조건식]
	[ORDER BY 컬럼명 ASC or DESC;]

- INSERT : 추가
	원하는 컬럼만 골라서 값을 저장할 떄 사용, 생략 불가능
	INSERT INTO 테이블명(컬럼명1, 컬럼명2,...)
	VALUES (값1, 값2, ...)

	전체 컬럼에 값을 저장할 떄 사용
	INSERT INTO 테이블명
	VALUES (값1, 값2, ...);

- UPDATE : 수정
	UPDATE 테이블명
	SET 컬럼명1 = 값1, 컬럼명2 = 값2
	[WHERE 조건식]

- DELETE : 삭제
	DELETE FROM 테이블명
	[WHERE 조건식]


자바컬렉션 프레임워크와 예외처리르 ㄹ이용한 과제 2ㅂ문제 (패키지 명 : day20_본인이름)
1. 학생 성적관리 프로그램 (어레이 리스트)
	사용자 입력을 받아 이름과 점수를 저장
	클래스명 : Student (toSTring 오버라이딩, equals 오버라이딩)
	필드 : private
	이름 세ㅐ터 없음
	나이 세터 ㅇ벗음
	수학점수
	영어점수
	국어점수

	생성자 : 이름과 나이만 받는 생성자
	메소드 : 점수의 합을 구하고 반홚하는 메솓,(total)
		평균점수 구하는 메솓,(printAvg)
		학생의 점수를 저장하는 반환 메소드(addScore)
			

	메인클래스 : StuMain
	조건 학생은 최대 7명까지만 존재하고 7명 학생들의 각 평균점수 출려
	ArrayList 객체 사용하여 학생 객체들을 저장할 것
	학생 이름이 동일하면 1명의 학생으로 인식할 것 => hashCode의 값은 나이로 반환
	점수는 0점 ~ 100점 사이의 값이어야 한다.
	예외 처리 필수 진행(예외처리 클래스 만들어서 진행)
	





































































 