-- 1번 : 집계함수

-- 집계함수의 결과는 행이 1개
-- NULL은 포함시키지 않는다

-- COUNT()
SELECT * FROM EMPLOYEES;

-- 전체 직원수 확인
SELECT COUNT(*)
FROM EMPLOYEES;

-- 특정 부서 110번의 직원수 확인
SELECT DISTINCT DEPARTMENT_ID
FROM EMPLOYEES;

SELECT COUNT(*) AS "110번의 직원수"
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 110;

-- SUM()
-- 모든 직원의 급여 총합 계산

SELECT SUM(SALARY)
FROM EMPLOYEES;

-- 부서별 급여 총합 계산
SELECT DEPARTMENT_ID "부서번호", SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;

-- AVG
-- 전체 직원의 평균 급여
SELECT AVG(SALARY)
FROM EMPLOYEES;

-- 부서별 평균 급여
SELECT DEPARTMENT_ID, AVG(SALARY)"급여 평규", SUM(SALARY) "급여 합계", COUNT(*)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;

-- MAX(), MIN()
SELECT MAX(SALARY), MIN(SALARY)
FROM EMPLOYEES;

-- NULL 포함 안함
SELECT COUNT(COMMISSION_PCT), COUNT(NVL(COMMISSION_PCT,0))
FROM EMPLOYEES;

-- 2. GROUP BY, HAVING 
-- 평균 급여가 5000 이상인 부서 조회
SELECT DEPARTMENT_ID, AVG(SALARY)
FROM EMPLOYEES
--WHERE AVG(SALARY) >= 5000
GROUP BY DEPARTMENT_ID;

SELECT DEPARTMENT_ID, AVG(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING AVG(SALARY) >= 5000;

-- 부서별 급여 총합이 50000 보다 작은 부서들만 내림차순으로 정렬
SELECT DEPARTMENT_ID, SUM(SALARY) 급여총합
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING SUM(SALARY) < 50000
ORDER BY SUM(SALARY) DESC;


CREATE TABLE TBL_STU_G
(
	STU_ID NUMBER,
	STU_NAME VARCHAR2(100) NOT NULL,
	STU_PHONE VARCHAR2(14),
	STU_AGE NUMBER,
	STU_DEPT VARCHAR2(100),
	CONSTRAINT PK_STU_G PRIMARY KEY(STU_ID)
);

SELECT * FROM TBL_STU_G;

INSERT INTO TBL_STU_G
--VALUES (1, '조승우', '8901-8888', 30, '교육학과');
--VALUES (2, '이동욱', '9012-9999', 30, '컴퓨터 공학과');
--VALUES (3, '김소현', '9876-1234', 20, '방송연예과');
--VALUES (4, '김남길', '5050-1222', 26, '컴퓨터 공학과');
--VALUES (5, '강하늘', '5111-5151', 22, '방송연예과');
--VALUES (6, '공유', '5050-5151', 30, '컴퓨터 공학과');
--VALUES (7, '이종혁', '1213-2222', 34, '방송연예과');
--VALUES (8, '박은빈', '1213-2222', 20, '방송연예과');

-- 1) 학과 종류 검색
SELECT DISTINCT STU_DEPT
FROM TBL_STU_G;

-- 2) 각 학과별 학생 수 조회

SELECT STU_DEPT, COUNT(*)
FROM TBL_STU_G
GROUP BY STU_DEPT;

-- 3) 각 학과별 평균나이 조회

SELECT STU_DEPT 학과, ROUND(AVG(STU_AGE),2) 평균나이
FROM TBL_STU_G
GROUP BY STU_DEPT;

-- 4) 학과별로 26살 이상인 학생 전체 컬럼 조회(이름, 핸드폰 번호, 나이, 학과로 별칭 붙여서)
SELECT STU_NAME 이름, STU_PHONE "핸드폰 번호", STU_AGE 나이, STU_DEPT 학과
FROM TBL_STU_G
WHERE STU_AGE >= 26
ORDER BY STU_DEPT;

SELECT STU_DEPT 학과, COUNT(*) "학생 수"
FROM TBL_STU_G
WHERE STU_AGE >= 26
GROUP BY STU_DEPT;

-- 5) 학생이름이 김으로 시작하거나 이로 시작하느 학생들의 학과별 수 조회
SELECT STU_DEPT 학과, COUNT(*) 학생수
FROM TBL_STU_G
WHERE STU_NAME LIKE '이%' OR STU_NAME LIKE '김%'
GROUP BY STU_DEPT;

-- 6) 컴퓨터 공학과의 학생중 25이상인 학생 수 조회
SELECT COUNT(*) AS "일이삼사오육칠팔구십"
--SELECT COUNT(*) AS "AAAAAAAAAAAAA"
FROM TBL_STU_G
WHERE STU_DEPT = '컴퓨터 공학과' AND STU_AGE >= 25;
-- 별칭은 30자 이하
-- 13글자이지만 UTF-8 2~3바이트 처리 제한 초과(오라클에서 자주 발생)


