소프트웨어 디자인 설계 패턴 ->  JDBV -> 연습쿼리 -> 팀과제

1. 소프트웨어 디자인 설계 패턴 ****
1) 디자인 패턴의 3가지 분류(GOF : Gang of Four)
	생성(Creational)	객체 생성 방식 추상화		Singleton, Factory Method, Abstract Factory,
						Builder, Prototype
	구조(Structural)	클래스/객체 조합 방식 정의	Adapter, Bridge, Composite, Decorator, Facade,
						Flyweight, Proxy
	행위(Behavioral)	객체 간 책임 분산/통신	Observer, Stratege, Command, Template Method,
						Iterator, State, Visitor, Mediator

- 생성 : 객체 생성에 관련된 패턴으로 객체 생성방식을 유연하고 재사용가능하게 만드는 방법을 제공
	Singleton(싱글톤 패턴)	: 전역변수를 사용하지 않고 객체를 하나만 생성하도록 하며,
				  생성된 객체를 어디에서든지 참조할 수 있도록 하는 디자인 패턴
	
	BUILDER(빌더 패턴)		: 객체 생성과정과 표현과정을 분리하여 동일한 생성과정에서 다양한 표현을 생성가능
				  복잡한 인스턴스를 조립하여 만드는 구조로, 동일한 생성 절차에서 서로 다른 표현 결과를 만들수 있는 디자인 패턴

	Absract Factory(추상팩토리 패턴) : 구체적인 클래스를 지정하지 않고 독립적인 객체들을 생성하기 위한 인터페이스를 제공
					구체적인 구현은 Concreate Product 클래스에서 이루어지는 특징을 갖는 디자인 패턴

	Factory Method (팩토리 메소드 패턴)	: 상위 클래스에서 객체를 생성하는 인터페이스를 정의하고 하위클래스에서 인스턴스를 생성하도록 하는 방식
						가상생성자 패턴이라고도 불림
						객체 생성 처리를 서브클래스로 분리하여 처리하도록 캡슐화하는 패턴

	Prototype(프로토 타입 패넡) 		: 생성할 객체의 종류를 명시하는데 원형을 먼저 만들어 놓고 복사한 후 필요한 부분만 수정하여 사용하는 패턴
					  생성할 객체의 원형을 제공하는 인스턴스에서 생성할 객체들의 타입이 결정되도록 설정하며 객체를 생성할 때 갖추어야할
					  기본형태가 있을 떄 사용되는 디자인 패턴

- 구조 패턴 (Structural Patterns) : 클래스나 객체(구조)를 조합해 더 큰 구조를 만드는 방법 제공
Adapter (적응자 패턴)
   호환성이 없는 인터페이스 때문에 함께 동작할 수 없는 클래스들이 함께 작동하도록 해줌
   기존 생성된 클래스를 재사용할 수 있도록 중간에서 맞춰주는 역할을 하는 인터페이스를 만드는 패턴
   상속을 이용하는 클래스 패턴과 위임을 이용하는 인스턴스 패턴의 두 가지 형태로 사용되는 디자인 패턴
Bridge (브릿지 패턴)
   구현부와 추상층을 분리하여 각자 독립적으로 변형할 수 있도록 함
   기능의 클래스 계층과 구현의 클래스 계층을 연결하고, 구현부에서 추상 계층을 분리하여 추상화된 부분과 
   실제 구현 부분을 독립적으로 확장할 수 있는 디자인 패턴
Composite (컴포지트 패턴)
   객체들의 관계를 트리 구조로 구성하여 부분-전체 계층을 표현함
   객체들의 관계를 트리 구조로 구성하여 부분-전체 계층을 표현하는 패턴
   사용자가 단일 객체와 복합 객체 모두 동일하게 다루도록 하는 디자인 패턴
Decorator (데코레이터 패턴)
   주어진 상황 및 용도에 따라 객체에 책임을 덧붙임
   기능 확장이 필요할 때 서브클래스 대신 사용할 수 있는 대안
   기존에 구현되어 있는 클래스에 그 때 그 때 필요한 기능을 추가해 나가는 설계 패턴
   기능 확장이 필요할 때 객체간의 결합을 통해 기능을 동적으로 유연하게 확장할 수 있게 해주어 상속의 대안으로 
   사용하는 디자인 패턴
Facade (퍼사드 패턴)
   서브시스템의 인터페이스 집합에 대해 통합된 하나의 인터페이스를 제공함
   복잡한 시스템에 대하여 단순한 인터페이스를 제공함으로써 사용자와 시스템 간, 또는 여타 시스템과의 결합도를 낮추어 
   시스템 구조에 대한 파악을 쉽게 하는 패턴
   오류에 대해서 단위별로 확인할 수 있게 하며, 사용자의 측면에서 단순한 인터페이스를 제공하여 접근성을 높일 수 있는 
   디자인 패턴
Flyweight (플라이웨이트 패턴)
   다수의 객체로 생성될 경우 모두가 갖는 본질적인 요소를 클래스화여 공유함으로써 메모리를 절약하고
   클래스의 경량화를 목적으로 하는 패턴
Proxy (프록시 패턴)
   다른 객체로의 접근을 통제하기 위해 그 객체의 매니저 또는 자리 채움자를 제공함
   실체 객체에 대한 대리 객체로 실체 객체에 대한 접근 이전에 필요한 행동을 취할 수 있게 만들며
   이 점을 이용해 미리 할당하지 않아도 상관없는 것들을 실제 이용할 때 할당하게 하여 메모리 용량을 아낄 수 있으며
   실체 객체를 드러나지 않게 하여 정보은닉의 역할도 수행하는 패턴

2. 소프트웨어 아키텍처 디자인 패턴
	소프트웨어 시스템을 효율적인고 견고하게 설계하기 위한 구조적인 틀
	소프트웨어를 구성하는 고수준 구조(High-level Structure)
	모듈 간 역할과 관계, 데이터 흐름을 정의
	확장성, 재사용성, 유지보수성 향상

- layered Pattern(계층형 구조)
	가장 전통적인 구조
	장점 : 분리 쉬움, 테스트 편함
	단점 : 계층 간 호출이 많으면 성능 저하 가능

- Client-server Pattern
	서버가 서비스제공, 클라이언트는 요청
	장점 : 구조 단순, 네트워크 기반 설계 용이
	단점 : 서버 부하 발생 가능성, 연결 장애 시 취약

- Event-Driven Pattern(이벤트 기반)
	이벤트가 발생하면 관련 모듈이 반응함
	주로 비동기 구조
	장점 : 유연성 높음, 느슨한ㄴ 결합
	단점 : 흐름 추적 어려움, 디버깅 어려움

- Microservieces Pattern
	기능별로 독립된 작은 서비스들로 구성
	각 서비스가 자체 DB, 로직, API를 가짐
	서비스 간 통신은 REST 메시지 큐 등ㅇ로 연결
	장점 : 독립배포, 확장 용이, 장애 격리
	단점 : 시스템 복잡도 증가, 통합 테스트 어려움

- MVC(Model - View - Controller)
	사용자 인터페이스아ㅘ 로직을 분리
	장점 : 역할 분리, 유지보수 편함
	단점 : 단순한 어플리케이션에서는 오히려 과함

- MVVM(Model - View - ViewModel)
	viewModel이 view와 model을 바인딩
	viewModel은 View와 데이터를 자동으로 동기화ㅏ
	장점 : 바인딩 자동화, UI코드 깔끔
	단점 : 초반 구조 설계 복잡

- Pipe And Fileter Pattern
	데이터를 여러 처리 단계로 연결
	각 단계는 데이터를 가공
	장점 :모듈 재사용 쉬움
	단점 : 실시간 처리 불리

3. MVC

M(MODEL)	: 테이블에서 조회된 결과값을 담기 위한 변수들이 선언된 클래스
		  클래스명 뒤에 DTO, VO 라는 문자열을 붙여준다.	
		  VO(Value Object) : 테이블을 보고 그댜ㅐ로 만든 객체
		  DIO(DATA Transfer Object) : 화면에 겨로가를 한번에 묶어서 전달할 객체 
VIEW		: 사용자에게 보여질 화면을 구성하는 부분
		Controller에 선언된 CRUD(Create, REad, Update, Delete) 메소드를 사용할 부분

CONTROLER	: jsp에서 더 자세히 알아보기
		  DAO(DATA ACCESS OBJECT) : 테이블에 접근할 수 있는 메소듣들이 선언된 클래스 접근후 결과 값이 있을 경우 Model 객체에 담은 후 처리



4. JDBC
	Java DataBase Connectivity(자바 데이터 베이스 연결)
	자바 프로그램과 데이터베이스르 ㄹ연결시켜주는 API

JDBC Driver => jar로 다운받아서 (Build Path 추가 후 사용)
		클래스로, 객체로 다룬다.
		해당 클래스에서 제공하는 기능들을 활용하여 DB와 소통하는 API

도서관 프로젝트 진행한 것
패키지 다시 나눈다 => 1차 검토
클래스 수정 => 2차 검토



변수나 메소드가 static 일때 오버라이드 관련
malloc calloc, size

{1,2} & {2, 3} -> {2}교집합
10 & 1 ->비트 연산
&& and 연산자


